================================
==  PURPOSE OF THIS SOFTWARE  ==
================================

This software provides a possibility to gather all CalDAV URLs for usage in third-party clients, like Mozilla Thunderbird.
Additionally, it also provides the - for most cases - correct CardDAV URL.


================
==  DONATIONS ==
================

If this software helps you to achieve your goal please consider at least a small donation:
  https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=JVTUEYXWG76MA
(Even a small amount helps financing the server and development costs. :-) )


================================
==  HOW TO RUN THIS SOFTWARE  ==
================================

This piece of software is provided as a fully working Eclipse project. In fact, it can simply be imported as an existing Eclipse project.
Please note that before the project will work you have to run the appropriate Gradle task which downloads and adds all needed third-party libraries
to the classpath. This should be done by using the following command:
  "./gradlew(.bat) eclipse"

Furthermore, it is also a fully working IntelliJ IDEA project and the corresponding task to set it up as such is done by:
  "./gradlew(.bat) idea"

Furthermore, Gradle provides a functionality to generate the GroovyDoc automatically:
  "./gradlew(.bat) groovydoc"

Lastly, it is also possible to build the project and create a distribution zip file which will create the same zip file you can download from Github repository:
  "./gradlew(.bat) build distZip"

Side-note: it is always recommended to run "./gradlew(.bat) clean" or add the "clean" task to any other command to clean all old compiled files.

In case of a distribution zip file you can simply run the software by extracting the file, entering the "bin" directory and execute the appropriate script for your operating system.


=========================
==  PROJECT STRUCTURE  ==
=========================

The project uses Groovy which is based upon Java which means it will compile to plain Java classes and can be run as long as a Java Runtime Environment (JRE) is installed on the system.
To compile and build the project a working JDK installation is needed.

However, the project has been splitted into three main parts: "api", "cmdline" and "gui" which are fully working projects on its own.
Therefore, to only build the API (project "api"), command line application (project "cmdline") or the GUI application (project "gui") you just have to prepend the appropriate name to the Gradle command in the form: ":<projectName>:".
For example, to generate the distribution zip file for the GUI application you should run: "./gradlew(.bat) :gui:clean :gui:distZip" (the output will be placed in the project folder (in this example in the folder named "gui")

All Groovy source files are located in the soure folder "src/main/groovy".

To achieve a working Gradle build it is also required to add all used resources (e.g. images) into the source folder "src/main/resources"
according to the package structure of the main Groovy source folder. This means that resources are now located in two different source folders
whereas they are needed in the main source folder to be able to run the project under Eclipse/IntelliJ IDEA and the resources located in the resources folder
are required to achieve a working Gradle distribution zip file.

Moreover, if any unit test are added they will be located in the source folder "src/test/groovy".


================
==  COPYRIGHT ==
================

Please look at the file COPYRIGHT for further notices.


=================
==  CHANGELOG  ==
=================

Please look at the file CHANGELOG for further information.
